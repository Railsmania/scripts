1
00:00:00,000 --> 00:00:04,000
このビデオでは、新しいRailsアプリケーションを作成し

2
00:00:04,000 --> 00:00:08,000
無料のHTMLダッシュボードテーマを追加の仕方を紹介します。このテーマはすでに

3
00:00:08,000 --> 00:00:12,000
いろんなグラフがたくさん含まれているほか、ブートストラップ(Bootstrap)に基づいているので

4
00:00:12,000 --> 00:00:16,000
モバイルフレンドリーです。

5
00:00:16,000 --> 00:00:20,000
Railsのプロジェクトにブートストラップのテーマを追加するのは非常に簡単ですので、さっそく始めましょう！

6
00:00:20,000 --> 00:00:24,000
最初に、ターミナルウィンドウを開いてRailsプロジェクトを作成しましょう。

7
00:00:24,000 --> 00:00:28,000
プロジェクトには"bob"という名前をつきましょう

8
00:00:28,000 --> 00:00:32,000
プロジェクトを作るために適当なディレクトリに rails new bob

9
00:00:32,000 --> 00:00:36,000
というコマンドを実行します。

10
00:00:36,000 --> 00:00:40,000
プロジェクトのすべてのファイルを生成するために、しばらくの時間がかかるかもしれません。

11
00:00:40,000 --> 00:00:44,000
終わったら問題がないことを確認するためにHTTPサバーを起動しましょう。

12
00:00:44,000 --> 00:00:48,000
HTTPサバーを起動しましょう。ターミナルで

13
00:00:48,000 --> 00:00:52,000
"bundle exec rails server"

14
00:00:52,000 --> 00:00:56,000
というコマンドを実行します。新しいブラウザタブを開いて

15
00:00:56,000 --> 00:01:00,000
サーバのURLにアクセスしてください

16
00:01:00,000 --> 00:01:04,000
生成されたRailsのデフォルトのページを見ることができます。

17
00:01:04,000 --> 00:01:08,000
現在のアプリケーションを実行している環境に関する情報が表示されています。

18
00:01:08,000 --> 00:01:12,000
このデフォルトのページを見ることができればすべてが正常に動作しています。

19
00:01:12,000 --> 00:01:16,000
質問：どのようにデフォルト以外のページを表示できますか？

20
00:01:16,000 --> 00:01:20,000
答え：routes.rbファイルにルート(route)を追加します。

21
00:01:20,000 --> 00:01:24,000
アプリケーションのページのURLのすべてがroutes.rbファイルに追加される必要があります。

22
00:01:24,000 --> 00:01:28,000
こうしましょう, routes.rbファイルを開きます.

23
00:01:28,000 --> 00:01:32,000
rootが定義されているコードのコメントを外してみましょう​。

24
00:01:32,000 --> 00:01:36,000
クールな管理ダッシュボードにするために、rootのルート(route)をダッシュボードコントローラー

25
00:01:36,000 --> 00:01:40,000
とインデックスアクションの名前に変更してファイルを保存しましょう。ブラウザタブを再読み込みしてください

26
00:01:40,000 --> 00:01:44,000
デフォルトのページがなくなっていることに注意してください。かわりに

27
00:01:44,000 --> 00:01:48,000
この素敵なエラーメッセージページに置き換えられています。ルーティングエラーとなっていることを示しています

28
00:01:48,000 --> 00:01:52,000
原因はDashboardsControllerが存在しないためです。

29
00:01:52,000 --> 00:01:56,000
ダッシュボードコントローラと
30
00:01:56,000 --> 00:02:00,000
とインデックスを作成してみましょう。app/controllersのディレクトリで

31
00:02:00,000 --> 00:02:06,000
dashboards_controller.rbという名前のファイルを作成して
、
32
00:02:06,000 --> 00:02:10,000
次のコードを書きましょう

33
00:02:10,000 --> 00:02:14,000
DashboardsControllerはすでにRailsに作られてあるApplicationControllerを継承します。

34
00:02:14,000 --> 00:02:18,000
indexアクションは特別なロジックがないので

35
00:02:18,000 --> 00:02:22,000
なにも書く必要がありません。

36
00:02:22,000 --> 00:02:26,000
次に、このアクション用のビューを作成する必要があります。app/viewsディレクトリで

37
00:02:26,000 --> 00:02:30,000
コントローラーと同じ名前のdashboardsというディレクトリを作りましょう.

38
00:02:30,000 --> 00:02:34,000
そのディレクトリの中にindex.html.erbのファイルを追加します

39
00:02:34,000 --> 00:02:38,000
次に、index.html.erbに、この短いテキストを入力しましょう。

40
00:02:38,000 --> 00:02:42,000
保存して、rails server を再起動し、ブラウザでプロジェクトを表示すると

41
00:02:42,000 --> 00:02:43,066


42
00:02:43,066 --> 00:02:47,066
ダッシュボードのインデックスビューとそのテキストが表示されます。

43
00:02:47,066 --> 00:02:51,066
今からBootstrapのテーマを追加してみましょう。

44
00:02:51,066 --> 00:02:55,066
ほとんどのBootstrapのテーマの中にはHTMLのサンプル

45
00:02:55,066 --> 00:02:59,066
とすべてのCSSとJavascriptがフォルダごと

46
00:02:59,066 --> 00:03:03,066
に含まれています。今このままで置いておきましょう。

47
00:03:03,066 --> 00:03:08,600
テーマのすべてのCSSをassets/stylesheetsのディレクトリにコピーします。

48
00:03:08,600 --> 00:03:12,600
もし同じCSSで改行されたファイルと改行されていないファイルがあったら

49
00:03:12,600 --> 00:03:16,600
改行されていないほうをコピーしてください。

50
00:03:16,600 --> 00:03:19,533


51
00:03:19,533 --> 00:03:23,533
Javascriptをassets/javascripts/にコピーします

52
00:03:23,533 --> 00:03:27,533
CSSと同じように同じJavascriptで改行されたファイルと改行されていないファイルがあったら

53
00:03:27,533 --> 00:03:33,833
改行されていないほうをコピーしてください。

54
00:03:33,833 --> 00:03:37,833
画像ファイルをassets/images/にコピーします。

55
00:03:37,833 --> 00:03:41,833
最後に、カスタムフォントがある場合,

56
00:03:41,833 --> 00:03:45,833
assets/fontsというディレクトリを作成し、フォントをそこにコピーしてください。

57
00:03:45,833 --> 00:04:05,733
Simple!

58
00:04:05,733 --> 00:04:09,733
HTMLのサンプルをビユーに利用します。

59
00:04:09,733 --> 00:04:13,733
。一番簡単な方法としてrailsのレイアウト（app/views/layouts/application.html.erb）に利用できますが

60
00:04:13,733 --> 00:04:17,733
一つのアプリケーションでたくさんのテーマを使えるように

61
00:04:17,733 --> 00:04:21,733
する方法としてレイアウトにHTMLは設定しません。

62
00:04:21,733 --> 00:04:25,733
レイアウトではjavascript_include_tagのタグ

63
00:04:25,733 --> 00:04:29,733
を今の場所からページのbodyの一番下に移動します。

64
00:04:29,733 --> 00:04:37,466

65
00:04:37,466 --> 00:04:41,466
つぎに、サンプルのHTMLの最初からj

66
00:04:41,466 --> 00:04:43,833


67
00:04:43,833 --> 00:04:48,666
Javascriptが定義されている手前の行までを選択して

68
00:04:48,666 --> 00:04:52,666
/app/views/dashboards/index.html.erbのファイルにコピーしてください

69
00:04:52,666 --> 00:04:56,666


70
00:04:56,666 --> 00:05:01,266
ファイルを保存して、ブラウザを再読み込みしてください

71
00:05:01,266 --> 00:05:05,266
どうでしょう、素晴らしいように見えますが、不足していることもいくつかあります。

72
00:05:05,266 --> 00:05:09,266
ブラウザの開発ツールを使うと何が壊れているかを見ることができます。

73
00:05:09,266 --> 00:05:13,266
この問題を修正する方法ですが、少し裏技を使ってこうします：

74
00:05:13,266 --> 00:05:17,266
FontAwesomeのcssファイルを

75
00:05:17,266 --> 00:05:21,800
ERBファイルに変換してください。

76
00:05:21,800 --> 00:05:25,800
こうするとRailsのパスヘルパーを使用して、パスを修正することができます:

77
00:05:25,800 --> 00:05:29,800


78
00:05:29,800 --> 00:05:33,800


79
00:05:33,800 --> 00:05:37,800
次に、Javascriptの一部を修正する必要があります。ブラウザの開発ツールのコンソールで

80
00:05:37,800 --> 00:05:41,800
エラーが出ている二つのJavaScriptファイルをスタブします

81
00:05:41,800 --> 00:05:45,800
これらの2つのファイルは、ただのデモファイルなので

82
00:05:45,800 --> 00:05:49,800
スタブのキーワードを使用して無視するようにしても問題はありません。こうすると後からでも

83
00:05:49,800 --> 00:05:53,800
利用できるように、プロジェクトにファイルを残したままで、スタブのキーワードがそれらを無視するように指示します。

84
00:05:53,800 --> 00:05:57,800
ブラウザを再び読み込むとページはエラーを示めさず、

85
00:05:57,800 --> 00:06:01,800
テーマがすべてちゃんとここに表示されています。

86
00:06:01,800 --> 00:06:05,800
これは今回のレッスンでした。RailsMania.comで共有している

87
00:06:05,800 --> 00:06:09,800
関連コンテンツやその他のより詳細なトピックをご覧ください。

88
00:06:09,800 --> 00:06:10,033


