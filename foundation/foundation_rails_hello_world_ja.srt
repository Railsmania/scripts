1
00:00:00,000 --> 00:00:04,000
このレッスンでは、Ruby on Railsのプロジェクト

2
00:00:04,000 --> 00:00:08,000
の基本を説明します。新しいプロジェクトを作成しましょう


3
00:00:08,000 --> 00:00:12,000
新しいプロジェクトを作成するために

4
00:00:12,000 --> 00:00:16,000
ターミナルで「rails new」のコマンドを実行します

5
00:00:16,000 --> 00:00:20,000
Rails new  myproject

6
00:00:20,000 --> 00:00:24,000
これはmyprojectという名前のプロジェクトのディレクトリを作成します

7
00:00:24,000 --> 00:00:28,000
すでにこのプロジェクトには、あなたのアプリケーション​​を実行するために必要なものがすべて含まれています。


8
00:00:28,000 --> 00:00:32,000
その内容を見てみましょう

9
00:00:32,000 --> 00:00:36,000
いくつかのファイルやディレクトリがあります

10
00:00:36,000 --> 00:00:40,000
今回のビデオでは最も重要なファイだけを説明します。

11
00:00:40,000 --> 00:00:44,000
最初、Gemfileというファイルに注目しましょう。

12
00:00:44,000 --> 00:00:48,000
Gemfileでは、アプリケーションのための必要なソフトウェアが定義されています。

13
00:00:48,000 --> 00:00:52,000
Rubyのソフトウェアは、通常、ルビーで

14
00:00:52,000 --> 00:00:56,000
gemと呼ばれるパッケージに格納されています。
GemfileはRailsのプロジェクトが使っているすべてのgemのリストで。

15
00:00:56,000 --> 00:01:00,000
このリストにRailsのバージョンも定義されています。

16
00:01:00,000 --> 00:01:04,000


17
00:01:04,000 --> 00:01:08,000
Gemfileにはさらに多くのgemがあります。Railsの多くの便利な機能は

18
00:01:08,000 --> 00:01:12,000
gemをインストールすることによって使えるようになります。

19
00:01:12,000 --> 00:01:16,000
私たちは、この後のビデオでほかのgemが必要な場合のgemの探し方、インストールと使用方法をお教えします。

20
00:01:16,000 --> 00:01:20,000
Gemfileを変更した場合

21
00:01:20,000 --> 00:01:24,000
次のコマンドを実行する必要があります "bundle install"

22
00:01:24,000 --> 00:01:28,000
このコマンドは、Gemfileで定義されてあるすべてのソフトウェアをダウンロードし、
23
00:01:28,000 --> 00:01:32,000
インストールして、プロジェクトで利用できるようになります。

24
00:01:32,000 --> 00:01:36,000
プロジェクトは、生成されたばかりのときでも

25
00:01:36,000 --> 00:01:40,000
すでにWebサーバを起動できます。

26
00:01:40,000 --> 00:01:44,000
ターミナルでプロジェクトのディレクトリに移動し次のコマンドを実行します：

27
00:01:44,000 --> 00:01:48,000
"bundle exec rails server"

28
00:01:48,000 --> 00:01:52,000
このコマンドは、デフォルトのRailsのページ

29
00:01:52,000 --> 00:01:56,000
を提供するWebサーバーを起動します。デフォルトのページ

30
00:01:56,000 --> 00:02:00,000
は興味深いものではありませんが、それを見たときプロジェクトが正常に動作していると確認できます。

31
00:02:00,000 --> 00:02:04,000


32
00:02:04,000 --> 00:02:08,000
次の重要なのはconfig/のディレクトリです。

33
00:02:08,000 --> 00:02:12,000
プロジェクトのすべての設定ファイルがここに含まれています。

34
00:02:12,000 --> 00:02:16,000
デフォルト値のままでも使用することができます。

35
00:02:16,000 --> 00:02:20,000
今後のレッスンで、変更する必要があったら、それぞれのファイルについてを説明します。

36
00:02:20,000 --> 00:02:24,000
ここでは、ほとんどのすべてのプロジェクトで変更されるの
37
00:02:24,000 --> 00:02:28,000
ファイルについて説明します：　config/routes.rb.

38
00:02:28,000 --> 00:02:32,000
このファイルは、プログラミングの例がたくさん書かれています。

39
00:02:32,000 --> 00:02:36,000
ルートは、ユーザがURLにアクセスしたとき

40
00:02:36,000 --> 00:02:40,000
どのコントローラーのコードを起動するかを定義します

41
00:02:40,000 --> 00:02:44,000
例として、root routeのその行のコメントを外してみましょう​。

42
00:02:44,000 --> 00:02:48,000
ルートはトップページを表示する特別なURLです。

43
00:02:48,000 --> 00:02:52,000

44
00:02:52,000 --> 00:02:56,000
。'welcome#index'という文字列は、welcomeコントローラ, indexアクションを示します.

45
00:02:56,000 --> 00:03:00,000
ユーザがトップページにアクセスするとwelcomeコントローラ
46
00:03:00,000 --> 00:03:04,000
のindexアクションのコードが呼び出されます。

47
00:03:04,000 --> 00:03:08,000
アクションとは何ですか？コントローラとは何ですか？

48
00:03:08,000 --> 00:03:12,000
プロジェクトにappというディレクトリがあります。

49
00:03:12,000 --> 00:03:16,000
appディレクトリの構造はRailsアプリケーションの特徴を表しています。

50
00:03:16,000 --> 00:03:20,000
RailsのMVCはモデル - ビュー - コントローラと呼ばれるアーキテクチャで構成されています。

51
00:03:20,000 --> 00:03:24,000
appのディレクトリの中にモデル(models)、ビュー(views)と

52
00:03:24,000 --> 00:03:28,000
コントローラ(controllers)用のサブディレクトリがあります。

53
00:03:28,000 --> 00:03:32,000
ユーザが、あるURLでアプリケーションにアクセスするとR

54
00:03:32,000 --> 00:03:36,000
Railsは最初にconfig/ routes.rbのファイルを読み、

55
00:03:36,000 --> 00:03:40,000
このリクエストにレスポンスするコントローラーを判別します。

56
00:03:40,000 --> 00:03:44,000
さきほど、welcomeコントローラを使用するようにconfig/routes.rb

57
00:03:44,000 --> 00:03:48,000
適切なコントローラーファイルを作成しましょう。

58
00:03:48,000 --> 00:03:52,000
すべてのコントローラは、アプリケーションコントローラを継承します。

59
00:03:52,000 --> 00:03:56,000
welcomeという名前の新しいコントローラを作成するためのコード：

60
00:03:56,000 --> 00:04:00,000
class WelcomeController 継承 ApplicationController.

61
00:04:00,000 --> 00:04:04,000
 End.

62
00:04:04,000 --> 00:04:08,000
config/routes.rbに 'welcome#index'　を書きました。　

63
00:04:08,000 --> 00:04:12,000
その意味は

64
00:04:12,000 --> 00:04:16,000
welcomeコントローラ内部のindexアクションです。

65
00:04:16,000 --> 00:04:20,000
コントローラーに新しいアクションを作成するには、単に新しいRubyのメソッドを作成します。

66
00:04:20,000 --> 00:04:24,000
これによって、コントローラーのindexメソッドは呼び出されますが、

67
00:04:24,000 --> 00:04:28,000
この時点では,何もレスポンスを返しません。また、ユーザのブラウザを表示するためにビューが必要です。

68
00:04:28,000 --> 00:04:32,000

69
00:04:32,000 --> 00:04:36,000
すべてのビューはapp/viewsというディレクトリにあります。デフォルトでコントローラは、

70
00:04:36,000 --> 00:04:40,000
コントローラと同じ名前のディレクトリからビューをレンダリングします。

71
00:04:40,000 --> 00:04:44,000
ですのでwelcomeというディレクトリを作成しましょう。

72
00:04:44,000 --> 00:04:48,000
まず、indexビューのファイルを作成する必要があります。

73
00:04:48,000 --> 00:04:52,000
index.html.erbというファイルを作成してください。

74
00:04:52,000 --> 00:04:56,000
.erbの拡張子は、RailsによってHTMLが生成されます。

75
00:04:56,000 --> 00:05:00,000

76
00:05:00,000 --> 00:05:04,000
これのおかげで、動的なコンテンツを作成できるようになります。
たとえば、

77
00:05:04,000 --> 00:05:08,000
ルビーとHTMLを混ぜてプログラミングすることができます。

78
00:05:08,000 --> 00:05:12,000
ターミナルでrailsのサーバを再起動してみましょう：

79
00:05:12,000 --> 00:05:16,000
"bundle exec rails server". では、プロジェクトタブにブラウザタブを再度開いて

80
00:05:16,000 --> 00:05:20,000
そこにRuby on Railsで生成された最初のHello Worldのウェブページで見ることができます！

81
00:05:20,000 --> 00:05:24,000
これは今回のレッスンでした。自分でこのプロジェクトのほかのファイルを

82
00:05:24,000 --> 00:05:28,000
探索することをお勧めします。新しいプロジェクトを生成することは非常に簡単ですので

83
00:05:28,000 --> 00:05:32,000
あなたが何かを壊してしまった場合、思い切ってプロジェクトを削除して新しく作成もできます！

84
00:05:32,000 --> 00:05:32,933


