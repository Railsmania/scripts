1
00:00:00,000 --> 00:00:04,000
Today, we'll add some fundamental automated testing tools

2
00:00:04,000 --> 00:00:08,000
so we can ensure we're delivering working features that do exactly what we wanted them to do.

3
00:00:08,000 --> 00:00:12,000
If you're not familiar with Behavior Driven Development, often called

4
00:00:12,000 --> 00:00:16,000
BDD, or Test Driven Development - I encourage you to learn more about it by

5
00:00:16,000 --> 00:00:20,000
looking at this lesson's notes. In this lesson, we're going to

6
00:00:20,000 --> 00:00:24,000
keep it simple so you can follow along, even if you're not familiar with BDD.

7
00:00:24,000 --> 00:00:28,000
So, let's get started. First, let's open

8
00:00:28,000 --> 00:00:32,000
the gemfile for the project we made in the previous lesson.

9
00:00:32,000 --> 00:00:36,000
The gemfile is a list of all the non-standard Ruby libraries that your application

10
00:00:36,000 --> 00:00:40,000
depends upon. As you can see, even Rails is listed in the gemfile.

11
00:00:40,000 --> 00:00:44,000
At the bottom, we want to create a group

12
00:00:44,000 --> 00:00:48,000
of gems that are only available to our development and test environments.

13
00:00:48,000 --> 00:00:52,000
The three gems that we want to include are: 

14
00:00:52,000 --> 00:00:56,000
rspec-rails, cucumber-rails, and database_cleaner.

15
00:00:56,000 --> 00:01:00,000
The number after each of these gems defines the precise

16
00:01:00,000 --> 00:01:04,000
version we'd like to use. To ensure you have the same experience as captured

17
00:01:04,000 --> 00:01:08,000
in this video lesson, be sure to lock each gem to the exact

18
00:01:08,000 --> 00:01:12,000
same version as we have here. Now, let's save this file.

19
00:01:12,000 --> 00:01:16,000
After modifying the gemfile, we have to tell our project to

20
00:01:16,000 --> 00:01:20,000
recheck and gather any dependencies that we didn't gather previously.

21
00:01:20,000 --> 00:01:24,000
So now we need to open up a console and run: bundle install.

22
00:01:24,000 --> 00:01:28,000
Bundler will fetch our three new dependencies

23
00:01:28,000 --> 00:01:32,000
and any dependencies that they might have and install them

24
00:01:32,000 --> 00:01:36,000
for our application to use.

25
00:01:36,000 --> 00:01:40,000
Once bundler has finished installing our gems, we need to complete a single installation step

26
00:01:40,000 --> 00:01:44,000
that cucumber requires. Simply type:

27
00:01:44,000 --> 00:01:48,000
rails generate cucumber:install. Cucumber creates the necessary files and folders

28
00:01:48,000 --> 00:01:52,000
for our project and now it's time for us to verify everything is installed correctly.

29
00:01:52,000 --> 00:01:56,000
To do that, let's run bundle exec rake cucumber

30
00:01:56,000 --> 00:02:00,000
We don't see much at all, but at least

31
00:02:00,000 --> 00:02:04,000
there are no errors. The console output does mention that there are zero

32
00:02:04,000 --> 00:02:08,000
scenarios with zero steps, and that's exactly right because we haven't written any yet.

33
00:02:08,000 --> 00:02:11,633


34
00:02:11,633 --> 00:02:15,633
So now it's time to actually write our first scenario.

35
00:02:15,633 --> 00:02:19,633
Create a file in features named dashboards.feature

36
00:02:19,633 --> 00:02:23,633


37
00:02:23,633 --> 00:02:27,633
In that file, we'll start with the keyword "Feature" then follow that with a single

38
00:02:27,633 --> 00:02:31,633
word description. Starting with an indent on the second line

39
00:02:31,633 --> 00:02:35,633
we'll type a short user story explaining what we're trying to do.

40
00:02:35,633 --> 00:02:39,633
In order to see current activity, a user

41
00:02:39,633 --> 00:02:43,633
should access a central dashboard.

42
00:02:43,633 --> 00:02:47,633
That's what we want this feature file to test for. Now we need to write a scenario

43
00:02:47,633 --> 00:02:51,633
that tests this feature. So we'll add a simple scenario

44
00:02:51,633 --> 00:02:55,633
that covers the basic requirement that a user can access a central dashboard.

45
00:02:55,633 --> 00:02:59,633
When I visit the root URL then the response should be

46
00:02:59,633 --> 00:03:03,633
the central dashboard. That's it!

47
00:03:03,633 --> 00:03:07,633
Our next step is to try rerunning the cucumber command.

48
00:03:07,633 --> 00:03:11,633
In the terminal run "bundle exec rake cucumber"

49
00:03:11,633 --> 00:03:15,633
This time the output is different. Cucumber attempted to run the scenario

50
00:03:15,633 --> 00:03:19,633
we wrote but didn't know what commands to execute to actually complete

51
00:03:19,633 --> 00:03:23,633
each step. Thankfully, cucumber suggested to us what we can use

52
00:03:23,633 --> 00:03:27,633
for step definitions. So copy the suggested steps.

53
00:03:27,633 --> 00:03:31,633
Create a file called dashboards.rb in features/step_definitions directory

54
00:03:31,633 --> 00:03:35,633
and paste the suggested content in there.

55
00:03:35,633 --> 00:03:39,633
Save that file, then run the scenarios again to see the difference.

56
00:03:39,633 --> 00:03:43,633
"bundle exec rake cucumber"

57
00:03:43,633 --> 00:03:47,633
This time cucumber realizes that we have step definitions but that we haven't

58
00:03:47,633 --> 00:03:51,633
customized them to test exactly what we want them to test.

59
00:03:51,633 --> 00:03:55,633
Now all we have to do is write a little code for testing.

60
00:03:55,633 --> 00:03:59,633
In our first step we just want to visit our root path of our application.

61
00:03:59,633 --> 00:04:03,633
And in the second step we want cucumber to verify

62
00:04:03,633 --> 00:04:07,633
that the HTML response has some visible HTML content that

63
00:04:07,633 --> 00:04:11,633
we can identify as the central dashboard.

64
00:04:11,633 --> 00:04:15,633
For now we're going to say that we - expect the page to have content

65
00:04:15,633 --> 00:04:19,633
"Dashboard". Let's save that file. Then run our

66
00:04:19,633 --> 00:04:24,433
cucumber scenario again to make sure everything passes.

67
00:04:24,433 --> 00:04:28,433
Voila! They pass. But let's make sure we're not being tricked.

68
00:04:28,433 --> 00:04:32,433
Let's see if it really is testing the page's content. We can do that by

69
00:04:32,433 --> 00:04:36,433
changing "Dashboard" to something we know isn't on that page like "RailsMania"

70
00:04:36,433 --> 00:04:42,066


71
00:04:42,066 --> 00:04:47,133
Running the tests again we see the scenario failed.

72
00:04:47,133 --> 00:04:51,133
And it even printed out that it expected to find "RailsMania" but that it wasn't

73
00:04:51,133 --> 00:04:55,133
found in all the visible HTML content. Great! We're all setup

74
00:04:55,133 --> 00:04:59,133
to start developing this application following a Behavior Driven Development or

75
00:04:59,133 --> 00:05:03,133
BDD style. In the next lesson we'll show the scenario we wrote for

76
00:05:03,133 --> 00:05:07,133
our next feature before we get busy writing the code to implement it.

77
00:05:07,133 --> 00:05:11,133
If you want to learn more about how Cucumber works and many of its little know features

78
00:05:11,133 --> 00:05:15,133
checkout the in-depth lesson on RailsMania.com.

79
00:05:15,133 --> 00:05:16,799
Thanks for watching!

